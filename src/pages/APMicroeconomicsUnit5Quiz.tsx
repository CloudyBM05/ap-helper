import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

const questions = [
  {
    question: 'In a competitive labor market, a firm will hire workers up to the point where:',
    options: [
      'A) Wage = Total Revenue',
      'B) Wage = Marginal Product',
      'C) Marginal Revenue Product = Marginal Factor Cost',
      'D) Wage = Average Variable Cost',
      'E) Total Product = Marginal Revenue',
    ],
    answer: 2,
    explanation: 'Firms hire until the value of the worker’s output (MRP) equals the cost of hiring (MFC).'
  },
  {
    question: 'The Marginal Revenue Product (MRP) of labor is defined as:',
    options: [
      'A) The additional cost of hiring one more worker',
      'B) The additional output from hiring one more worker',
      'C) The wage paid to the last worker hired',
      'D) The additional revenue generated by hiring one more worker',
      'E) The total revenue divided by the number of workers',
    ],
    answer: 3,
    explanation: 'MRP is the extra revenue from hiring one more worker.'
  },
  {
    question: 'Which of the following would increase the demand for labor?',
    options: [
      'A) An increase in the wage rate',
      'B) A fall in the product price',
      'C) A technological improvement that increases worker productivity',
      'D) A decrease in the marginal product of capital',
      'E) A rise in the number of available workers',
    ],
    answer: 2,
    explanation: 'Higher productivity increases MRP, raising labor demand.'
  },
  {
    question: 'The Least-Cost Rule is used to determine:',
    options: [
      'A) The number of units to produce for maximum profit',
      'B) How to minimize total output',
      'C) The most efficient combination of inputs',
      'D) The highest possible wage for each worker',
      'E) How many firms can enter a market',
    ],
    answer: 2,
    explanation: 'The least-cost rule finds the input mix that minimizes cost for a given output.'
  },
  {
    question: 'A firm should hire more labor when:',
    options: [
      'A) MRP < MFC',
      'B) MRP > MFC',
      'C) Wage = MRC',
      'D) Total revenue is maximized',
      'E) Product price is constant',
    ],
    answer: 1,
    explanation: 'If MRP > MFC, hiring more labor increases profit.'
  },
  {
    question: 'In a monopsony, the firm:',
    options: [
      'A) Is a wage taker',
      'B) Hires fewer workers and pays a higher wage than perfect competition',
      'C) Faces a perfectly elastic labor supply',
      'D) Must raise wages to attract additional workers',
      'E) Cannot influence the wage in the labor market',
    ],
    answer: 3,
    explanation: 'A monopsonist must raise wages for all workers to hire more.'
  },
  {
    question: 'The Marginal Factor Cost (MFC) curve in a monopsony:',
    options: [
      'A) Lies below the supply curve',
      'B) Is equal to the wage rate',
      'C) Lies above the labor supply curve',
      'D) Is horizontal',
      'E) Is downward sloping',
    ],
    answer: 2,
    explanation: 'In a monopsony, MFC lies above the labor supply curve.'
  },
  {
    question: 'A rightward shift of the labor supply curve could be caused by:',
    options: [
      'A) Fewer people seeking jobs',
      'B) Government-imposed hiring restrictions',
      'C) An increase in immigration',
      'D) A decrease in job training programs',
      'E) A rise in minimum wage',
    ],
    answer: 2,
    explanation: 'More immigration increases the supply of labor.'
  },
  {
    question: 'A derived demand for a resource means that:',
    options: [
      'A) The resource is not essential to production',
      'B) Demand is based on government intervention',
      'C) Demand is based on the demand for the final product',
      'D) Supply determines the final price',
      'E) The resource has no marginal product',
    ],
    answer: 2,
    explanation: 'Derived demand means resource demand depends on demand for the final product.'
  },
  {
    question: 'If a firm uses both capital and labor, and the MPL/PL < MPK/PK, it should:',
    options: [
      'A) Buy more labor and less capital',
      'B) Buy more capital and less labor',
      'C) Use only capital',
      'D) Maintain current input levels',
      'E) Raise the price of labor',
    ],
    answer: 1,
    explanation: 'If capital gives more output per dollar, buy more capital and less labor.'
  },
];

const APMicroUnit5Quiz = () => {
  const [current, setCurrent] = useState(0);
  const [selected, setSelected] = useState<number | null>(null);
  const [answers, setAnswers] = useState<(number | null)[]>(Array(questions.length).fill(null));
  const [submitted, setSubmitted] = useState(false);
  const [crossedOut, setCrossedOut] = useState<number[][]>(Array(questions.length).fill(null).map(() => []));
  const navigate = useNavigate();

  const handleSelect = (idx: number) => {
    setSelected(idx);
  };

  const handleNext = () => {
    const newAnswers = [...answers];
    newAnswers[current] = selected;
    setAnswers(newAnswers);
    setSelected(newAnswers[current + 1] ?? null);
    setCurrent((prev) => prev + 1);
  };

  const handleBack = () => {
    if (current > 0) {
      setCurrent((prev) => prev - 1);
      setSelected(answers[current - 1]);
    }
  };

  const handleSubmit = () => {
    const newAnswers = [...answers];
    newAnswers[current] = selected;
    setAnswers(newAnswers);
    setSubmitted(true);
  };

  const handleRetake = () => {
    setAnswers(Array(questions.length).fill(null));
    setSelected(null);
    setCurrent(0);
    setSubmitted(false);
    setCrossedOut(Array(questions.length).fill(null).map(() => []));
  };

  const handleCrossOut = (idx: number) => {
    setCrossedOut((prev) => {
      const copy = prev.map(arr => [...arr]);
      const arr = copy[current];
      if (arr.includes(idx)) {
        copy[current] = arr.filter(i => i !== idx);
      } else {
        copy[current] = [...arr, idx];
      }
      return copy;
    });
  };

  const BackToGuideButton = (
    <button
      className="absolute top-4 left-4 px-4 py-2 bg-slate-200 hover:bg-slate-300 rounded-lg font-semibold text-fuchsia-700 shadow transition flex items-center gap-2 z-20"
      onClick={() => navigate('/ap-microeconomics/unit/5')}
    >
      <span className="text-xl">←</span> Back to Unit 5
    </button>
  );

  if (submitted) {
    return (
      <div className="max-w-3xl mx-auto py-12 px-4 relative">
        {BackToGuideButton}
        <div style={{ height: 48 }} />
        <h1 className="text-3xl font-bold mb-8 text-center text-fuchsia-700">Quiz Results</h1>
        {questions.map((q, idx) => {
          const userAnswer = answers[idx];
          const isCorrect = userAnswer === q.answer;
          return (
            <div key={idx} className="mb-8 p-6 rounded-xl border bg-white shadow">
              <div className="mb-2 text-slate-500">Question {idx + 1}</div>
              <div className="mb-2 font-semibold">{q.question}</div>
              <ul className="mb-2">
                {q.options.map((opt: string, i: number) => (
                  <li
                    key={i}
                    className={`px-3 py-1 rounded ${i === q.answer ? 'bg-green-100 font-bold' : ''} ${userAnswer === i && userAnswer !== q.answer ? 'bg-red-100' : ''}`}
                  >
                    {opt}
                    {i === q.answer && (
                      <span className="ml-2 text-green-700 font-semibold">(Correct)</span>
                    )}
                    {userAnswer === i && userAnswer !== q.answer && (
                      <span className="ml-2 text-red-700">(Your answer)</span>
                    )}
                  </li>
                ))}
              </ul>
              {userAnswer === null ? (
                <div className="text-fuchsia-700 mb-1">You did not answer this question.</div>
              ) : isCorrect ? (
                <div className="text-green-700 mb-1">Correct!</div>
              ) : (
                <div className="text-red-700 mb-1">Incorrect.</div>
              )}
              <div className="mt-4 p-4 bg-fuchsia-50 rounded-lg">
                <h4 className="font-semibold text-fuchsia-900 mb-2">Explanation:</h4>
                <p className="text-fuchsia-800">{q.explanation}</p>
              </div>
            </div>
          );
        })}
        <div className="flex justify-center mt-8">
          <button
            className="bg-gradient-to-r from-fuchsia-500 to-orange-400 text-white px-8 py-4 rounded-xl font-bold text-lg shadow-lg hover:from-fuchsia-600 hover:to-orange-500 transition-all duration-300"
            onClick={handleRetake}
          >
            Retake Quiz
          </button>
        </div>
      </div>
    );
  }

  if (current >= questions.length) {
    return null;
  }

  const q = questions[current];

  return (
    <div className="max-w-2xl mx-auto py-12 px-4 relative">
      {BackToGuideButton}
      <div style={{ height: 48 }} />
      <div className="mb-8">
        <div className="text-slate-500 mb-2">
          Question {current + 1} of {questions.length}
        </div>
        <div className="text-lg font-semibold mb-4">{q.question}</div>
        <div className="space-y-3">
          {q.options.map((opt: string, idx: number) => (
            <div key={idx} className="flex items-center gap-2">
              <button
                type="button"
                className={`px-4 py-2 rounded-lg border w-full text-left transition-all duration-200 ${
                  selected === idx ? 'bg-fuchsia-500 text-white border-fuchsia-600' : 'bg-white text-slate-800'
                } ${crossedOut[current]?.includes(idx) ? 'line-through opacity-50' : ''}`}
                onClick={() => handleSelect(idx)}
                disabled={crossedOut[current]?.includes(idx)}
              >
                {opt}
              </button>
              <button
                type="button"
                className={`ml-2 px-2 py-1 rounded border text-xs ${crossedOut[current]?.includes(idx) ? 'bg-red-200 text-red-700 border-red-400' : 'bg-slate-100 text-slate-500 border-slate-300'}`}
                onClick={() => handleCrossOut(idx)}
                aria-label="Cross out option"
              >
                {crossedOut[current]?.includes(idx) ? 'Uncross' : 'Cross out'}
              </button>
            </div>
          ))}
        </div>
      </div>
      <div className="flex justify-between mt-8">
        <button
          className="bg-slate-200 text-slate-700 px-6 py-3 rounded-xl font-bold text-lg shadow hover:bg-slate-300 transition-all duration-300"
          onClick={handleBack}
          disabled={current === 0}
        >
          Back
        </button>
        {current < questions.length - 1 ? (
          <button
            className="bg-gradient-to-r from-fuchsia-500 to-orange-400 text-white px-6 py-3 rounded-xl font-bold text-lg shadow-lg hover:from-fuchsia-600 hover:to-orange-500 transition-all duration-300"
            onClick={handleNext}
            disabled={selected === null}
          >
            Next
          </button>
        ) : (
          <button
            className="bg-gradient-to-r from-fuchsia-500 to-orange-400 text-white px-6 py-3 rounded-xl font-bold text-lg shadow-lg hover:from-fuchsia-600 hover:to-orange-500 transition-all duration-300"
            onClick={handleSubmit}
            disabled={selected === null}
          >
            Submit
          </button>
        )}
      </div>
    </div>
  );
};

export default APMicroUnit5Quiz;
